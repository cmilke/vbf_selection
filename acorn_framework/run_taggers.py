#!/usr/bin/env python
import argparse
import pickle
from acorn_backend import analysis_utils as autils
from acorn_backend.uproot_wrapper import event_iterator
from acorn_backend import categorization_classes
from acorn_backend.tagger_loader import load_network_models
from acorn_backend.ntuple_recording import jet_recorder_options

#Define all the high level root stuff: ntuple files, branches to be used
_input_type_options = {
    'aviv': {
        'sig': {
           'run': autils.Flavntuple_list_VBFH125_gamgam[:2]
         , 'train': autils.Flavntuple_list_VBFH125_gamgam[4:6]
         , 'record': autils.Flavntuple_list_VBFH125_gamgam
        },
        'bgd': {
            'run': autils.Flavntuple_list_ggH125_gamgam[:2]
          , 'train': autils.Flavntuple_list_ggH125_gamgam[7:9]
          , 'record': autils.Flavntuple_list_ggH125_gamgam
        }
    },
    'cmilkeV1': {
        'sig': {
           'run': autils.Flavntuple_list_VBFH125_gamgam_V2[:1]
         , 'train': None 
         , 'record': autils.Flavntuple_list_VBFH125_gamgam_V2
        },
        'bgd': {
            'run': None
          , 'train': None
          , 'record': None
        }
    },
    'data': None
}

_branches_list = {
    'aviv': [
        'eventWeight',
        ('truth_particles',
            ['tpartpdgID', 'tpartstatus', 'tpartpT', 'tparteta', 'tpartphi', 'tpartm']
        ),
        ('truth_jets',
            ['truthjpT', 'truthjeta', 'truthjphi', 'truthjm']
        ),
        ('reco_jets',
            ['tj0pT', 'j0truthid', 'j0_isTightPhoton', 'j0_isPU', 'j0_QGTagger',
                            'j0_JVT', 'j0_fJVT_Tight', 'j0pT', 'j0eta', 'j0phi', 'j0m']
        )
    ],
    'cmilkeV1': None,
    'data': None
}

_tree_names = {
    'aviv': 'Nominal',
    'cmilkeV1': 'ntuple',
    'data': None
}

_Nevents_debug_default = 10


def record_events(input_type, args):
    # Define and initialize all event categories we want to use
    categories_to_dump = [
        categorization_classes.filter_with_JVT
    ]
    event_data_dump = { c.key: c(args.mode != 'record') for c in categories_to_dump }
        
    input_list = _input_type_options[args.ntuple][input_type][args.mode]
    tree_name = _tree_names[args.ntuple]
    branches = _branches_list[args.ntuple]
    events_to_read = _Nevents_debug_default if (args.debug and args.Nevents == None) else args.Nevents
    record_jets = jet_recorder_options[args.ntuple][args.t]

    # Iterate over each event in the ntuple list,
    # storing/sorting/filtering events into the data_dump as it goes
    for event in event_iterator(input_list, tree_name, branches, events_to_read):
        record_jets(input_type == 'sig', event, event_data_dump)

    # Print out either the full debug information, or just a summary
    for category in event_data_dump.values():
        print( category if args.debug else category.summary() )

    # Output the event categories for use by later scripts
    reco_level = '_truth' if args.t else ''
    data_dump_file_name = 'data/output_'+args.ntuple+reco_level+'_'+args.mode+'_'+input_type+'.p'
    pickle.dump( event_data_dump, open(data_dump_file_name, 'wb') )


def run():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s", required = False,
        default = False, action = 'store_true',
        help = "Run over Signal events",
    ) 
    parser.add_argument(
        "-b", required = False,
        default = False, action = 'store_true',
        help = "Run over Background events"
            "(Note: if neither -s or -b are given, default behaviour is to run over both)",
    ) 
    parser.add_argument(
        "--Nevents", required = False,
        default = None, type=int,
        help     = "How many events you want to run over",
    ) 
    parser.add_argument(
        "--mode", required = False,
        default = 'tag', type=str,
        help = "Modes: 'tag'    - Standard tagging procedure;"
               "       'train'  - Use training samples; keras models are permitted to fail on load;"
               "       'record' - Run over all samples, but merely categorize events, do not tag them",
    ) 
    parser.add_argument(
        "--ntuple", required = False,
        default = 'aviv', type=str,
        help = "Ntuples: 'aviv'      - Original ntuples from Aviv. Legacy based;"
               "         'cmilkeV1'  - Newer ntuples generated by Chris Milke with track info;"
               "         'data'      - Ntuples based on real data",
    ) 
    parser.add_argument(
        "--debug", required = False,
        default = False, action = 'store_true',
        help = "Prints debug information",
    ) 
    parser.add_argument(
        "-t", required = False,
        default = False, action = 'store_true',
        help = "Use truth jets instead of reco",
    ) 
    args = parser.parse_args()

    if args.mode != 'record': load_network_models(args.mode)
    if args.s: record_events('sig', args)
    if args.b: record_events('bgd', args)
    if not (args.b or args.s):
        record_events('sig', args)
        record_events('bgd', args)

run()
