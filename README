ACORN: Another Contrived acrOnym for a Reconstruction iNfrastructure

#########################
### Primary Data Flow ###
#########################

ntuple*.root:
   ||   The current starting point, ntuple generated from a raw AOD
   ||
   \/
acorn_framework/run_taggers.py: 
   ||       |   The central script of the framework, which takes as input a series of ntuples,
   ||       |   and iterates through them event-by-event. 
   ||       |   For every event, it iterates over the reco jets in the event,
   ||       |   and filters out jets which fail very basic criteria. 
   ||       |   It then passes the filtered jets to several "category" classes for further processing.
   ||       |   
   ||       |   The output it produces is a pickled list of the category classes in created.
   ||       |   These category classes in turn contain a list of all viable events, with each
   ||       |   event (optionally*) containing information on which jets were selected as VBF jets,
   ||       |   as well as signal/background tagging information for the event.
   ||       |
   ||       |   *passing the '-N' argument to the script will cause it to only record events,
   ||       |   but not perform selection or tagging on them.
   ||       |
   ||       v
   ||   acorn_framework/acorn_backend/event_categoriztion.py:
   ||       |   Each category class takes in a list of jets and other event information,
   ||       |   and applies its own set of filters and selection criteria to this information,
   ||       |   excluding jets or entire events. After passing through the class's filters,
   ||       |   an "Event Object" is created from the filtered data, and this event is appended
   ||       |   to the category's event list
   ||       | 
   ||       v 
   ||   acorn_framework/acorn_backend/acorn_containers.py:
   ||       |   This file contains both the acorn_jet class and the acorn_event class.
   ||       |   acorn_jets are created in run_taggers.py, just as a way to aggregate the disparate
   ||       |   information from the ntuple jets into one place.
   ||       |
   ||       |   The acorn_event object is created by the event_category classes.
   ||       |   Upon creation, the acorn_event object will iterate over the list of all available
   ||       |   "jet_selectors" (this list exists in acorn_framework/acorn_backend/selector_loader.py),
   ||       |   and passes itself to each selector object for selection and tagging.
   ||       |
   ||       v
   ||    acorn_framework/acorn_backend/base_jet_selectors.py and others...:
   ||       |   This file contains the base jet selector (from which all other selectors are extensions),
   ||       |   as well as a number of very basic selectors. Other more sophisticated selectors can be
   ||       |   found in acorn_framework/acorn_backend/machine_learning/. This class takes an event as input,
   ||       |   and as output produces a tuple of integers. These integers correspond to indices within
   ||       |   the jets list the acorn_event object contains. Specifically, they are the indices of the
   ||       |   2 jets that this selector class believes to be the VBF signal jets of the event.  
   ||       |   The method of selecting the jets varies from one selector class to another.
   ||       |
   ||       |   Upon selecting jets, it passes the event and its own selections to a list of available
   ||       |   event taggers.
   ||       |
   ||       v
   ||    acorn_framework/acorn_backend/event_taggers.py
   ||           The last step of the run_taggers hierarchy.
   ||           This class takes as input an acorn_event object, as well as the tuple output of 
   ||           a selector class. The tagger class then uses these to produces some sort of
   ||           event-level discriminant; i.e. a singular value which can be cut on in order
   ||           to determine if an event is a signal event or a background event.
   ||
   ||           Ideally, this discriminant should be a monotonically increasing value,
   ||           such that a higher value indicates that an event is more likely to be
   ||           a signal event.
   ||           (It makes it easier to graph things if all discriminants work this way)
   ||           
   \/
acorn_framework/output_*.p:
   ||   The pickled output of run_taggers.py. Contains a large nested data structure of all events,
   ||   filtered and sorted, with each event optionally containing various selection and tagging
   ||   information.
   ||
   \/
acorn_framework/evaluate*.py:
   ||   A series of evaluation scripts which evaluate the efficiency
   ||   of various aspects of the framework. These scripts are strictly intended
   ||   to produce final performance plots/figures. Any scripts which are meant 
   ||   to investigate the underlying mechanisms and parameters of the framework
   ||   or ntuple are located in acorn_framework/studies/
   \/
acorn_framework/plots/performance/*.pdf:
        A large variety of performance plots showing how well the framework algorithms
        actually work.






If you're wondering why the directory acorn_framework/backend only contains a single other directory,
that's because PYTHONPATH is kinda weird and this was the only way I felt I could do things safely.
I wanted "acorn_backend" as a module I could call, contained withing my PYTHONPATH.
If I simply add "acorn_backend" itself to my PYTHONPATH, then when I want to import, say,
acorn_utils, I would NOT be able to type this:

    from acorn_backend import acorn_utils
or
    import acorn_backend.acorn_utils

and instead I have to do:

    import acorn_utils

which I don't like, because it means the stuff in acorn_backend can clash with other global modules.

But if I were to have acorn_backend directly placed in acorn_framework,
and added acorn_framework to the PYTHONPATH, then I would be able to directly import, say, run_taggers.py
which could also clash.

Basically, this weird double nesting is just because I'm paranoid of module naming clashes.
